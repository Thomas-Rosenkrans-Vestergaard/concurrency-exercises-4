When and why will we use Threads in our programs?
    We use threads to run tasks in parallel. We mostly use threads when some expensive task needs to be run multiple
    times. Using threads can improve performance since a task that takes 1 second to complete
What is the Race Condition Problem and how can you solve it?
    A race condition is when multiple threads attempt to execute some non-atomic operation at the same time. This might
    cause the operation to fail. Race conditions might only cause the incorrect output in some cases, due to being
    dependant on the timing of the threads in the system.
    There are multiple ways to solve race conditions:
        Only allowing one thread to perform to operation at one time. This is called synchronization. In Java we can use
        the synchronized keyword, or we can maintain a lock. Maintaining a lock can be more advanced, but can also offer
         greater flexibility.
        Refactoring the operation to be atomic. Some operations can be refactored so they no longer cause race
        conditions.
Explain the Producer/Consumer-problem and how to solve it in modern Java Programs
    The Producer/Consumer-problem is how Producers can send their result to a consumer through a fixed size queue. This
    can be difficult since the producer may have to wait until space becomes available in the queue. Likewise, the
    consumer might have to wait for more results to become available. Multiple producers and consumers can work from
    different threads.
Explain what Busy Waiting is and why it's a bad thing in a modern software system.
    Busy Waiting means that some thread stops execution until some condition is true.
Describe Java's BlockingQueue interface, relevant implementations and methods relevant for the producer consumer problem.
    The BlockingQueue interface defines a Queue with support for blocking and waiting operations for insertion and
    retrieval of the values in the queue.

    	    Throws exception	Special value	Blocks	        Times out
    Insert	add(e)	            offer(e)	    put(e)	        offer(e, time, unit)
    Remove	remove()	        poll()	        take()	        poll(time, unit)
    Examine	element()	        peek()	        not applicable	not applicable

    When a Consumer knows how many elements are produced, that consumer can use the take() method.

